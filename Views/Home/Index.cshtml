@model List<Product>
@{
    ViewData["Title"] = "Browse Products";
    int currentPage = ViewBag.CurrentPage;
    int totalPages = ViewBag.TotalPages;
    ViewData["pagination"] = "pagination.css";
}

<div class="small-container">
    <div class="row row-2">
        <h2>All Products</h2>
        <!-- Search Bar -->
        <div class="search">
            <div class="container-lg">
                <form method="get" action="" class="search-bar">
                    <!-- The input value will appear in the URL as the 'search' parameter -->
                    <input type="text" name="search" placeholder="Search Anything" value="@Context.Request.Query["search"]" />
                    <button class="search-button" type="submit">
                        <i class="fa fa-search"></i>
                    </button>
                </form>
            </div>
        </div> <!-- End Search Bar -->
        <div class="filters">
            <form method="get" action="">
                <select name="sort" id="sort-options" onchange="this.form.submit()">
                    @if (Context.Request.Query["sort"] == "default")
                    {
                        <option value="default" selected>Default Sorting</option>
                    }
                    else
                    {
                        <option value="default">Default Sorting</option>
                    }

                    @if (Context.Request.Query["sort"] == "price")
                    {
                        <option value="price" selected>Sort by Price</option>
                    }
                    else
                    {
                        <option value="price">Sort by Price</option>
                    }

                    @if (Context.Request.Query["sort"] == "rating")
                    {
                        <option value="rating" selected>Sort by Rating</option>
                    }
                    else
                    {
                        <option value="rating">Sort by Rating</option>
                    }
                </select>
            </form>
        </div> <!-- End Filters -->
    </div>

    <!-- Product List -->
    <div class="row" id="product-list">
        @if (Model.Count > 0)
        {
            @foreach (var product in Model)
            {
                var reviewAverage = 4; // I will replace this with the review average later 
                <div class="col-4">
                    <img src=@product.image
                    onclick="window.location.href='@Url.Action("Details", "Product", new { productId = product.ProductID })'"
                    style="cursor: pointer;" />
                    <h4>@product.productName</h4>
                    <div class="rating">
                        @for (int i = 0; i < reviewAverage; i++)
                        {
                            <i class="fa fa-star"></i>
                        }
                        @for (int i = reviewAverage; i < 5; i++)
                        {
                            <i class="fa fa-star-o"></i>
                        }
                    </div>
                    <p>@product.price $</p>
                    @if (product.stock == 0)
                    {
                        <p style="color: red;">Out of Stock!</p> <!-- Show message if the stock is 0 -->
                    }
                </div>
            }

        }
        else
        {
            <div style="text-align: center;">
                @if (@Context.Request.Query["search"].ToString().Equals("all") == true)
                {
                    <h3>No products found</h3>
                }
                else
                {
                    <h3>No products found matching: @Context.Request.Query["search"]</h3>
                }
                <img src="~/Images/no-products-icon.png" style="text-align: center; margin-top: 30px; margin-bottom: 30px;">
            </div>
        }
    </div>


    <!-- Pagination -->
    @if (Model.Count > 0)
    {
        <div class="pagination-controls" style="text-align: center; margin-top: 20px; margin-bottom: 50px;">

            @* If the current page is greater than 0 (not the first page), show the "Back" button *@
            @if (currentPage > 0)
            {
                <a href="?category=@Context.Request.Query["category"].ToString()&page=@(currentPage - 1)@(string.IsNullOrEmpty(@Context.Request.Query["sort"].ToString()) ? "" : "&sort=" + @Context.Request.Query["sort"].ToString())"
                   id="prev"
                   class="pagination-button">
                    Back
                </a>
            }

            @* Display the current page number *@
            <span id="page-number" class="page-number">
                Page @(currentPage + 1)
            </span>

            @* If there are more pages (i.e., the current page is not the last page), show the "Next" button *@
            @if (currentPage < totalPages - 1)
            {
                <a href="?category=@Context.Request.Query["category"].ToString()&page=@(currentPage + 1)@(string.IsNullOrEmpty(@Context.Request.Query["sort"].ToString()) ? "" : "&sort=" + @Context.Request.Query["sort"].ToString())"
                   id="next"
                   class="pagination-button">
                    Next
                </a>
            }
        </div>
    }

</div>

